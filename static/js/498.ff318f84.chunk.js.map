{"version":3,"file":"static/js/498.ff318f84.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/EditForm/EditForm.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { Box, IconButton, InputAdornment, TextField } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { useDispatch } from 'react-redux';\nimport { fetchFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleFilter = e => {\n    const form = e.currentTarget;\n    const filterValue = form.elements.filter.value;\n    dispatch(fetchFilter(filterValue));\n  };\n  return (\n    <Box component=\"form\" onChange={handleFilter} noValidate>\n      <TextField\n        size=\"small\"\n        margin=\"normal\"\n        id=\"filter\"\n        label=\"Search\"\n        name=\"filter\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton>\n                <SearchIcon />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n      />\n    </Box>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operation';\nimport {\n  Avatar,\n  IconButton,\n  Link,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { openModal } from 'redux/contacts/modalSlice';\n\nexport const ContactList = ({ filter, contacts }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const handleEdit = id => {\n    dispatch(openModal(id));\n  };\n\n  function stringToColor(string) {\n    let hash = 0;\n    let i;\n\n    /* eslint-disable no-bitwise */\n    for (i = 0; i < string.length; i += 1) {\n      hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    let color = '#';\n\n    for (i = 0; i < 3; i += 1) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += `00${value.toString(16)}`.slice(-2);\n    }\n    /* eslint-enable no-bitwise */\n\n    return color;\n  }\n\n  function stringAvatar(name) {\n    return {\n      sx: {\n        bgcolor: stringToColor(name),\n      },\n      children: `${name[0].toUpperCase()}`,\n    };\n  }\n\n  const filteredContacts = contacts.filter(el => {\n    return el.name.toLowerCase().includes(filter.toLowerCase());\n  });\n  return (\n    <>\n      {!filteredContacts.length ? (\n        <Typography align=\"center\" sx={{ mt: 2 }}>\n          No contact found.\n        </Typography>\n      ) : (\n        <List>\n          {filteredContacts.map(el => (\n            <ListItem\n              key={el.id}\n              secondaryAction={\n                <>\n                  <IconButton\n                    edge=\"end\"\n                    aria-label=\"edit\"\n                    onClick={() => {\n                      handleEdit(el.id);\n                    }}\n                    sx={{ mr: 1 }}\n                  >\n                    <EditIcon />\n                  </IconButton>\n                  <IconButton\n                    edge=\"end\"\n                    aria-label=\"delete\"\n                    onClick={() => {\n                      handleDelete(el.id);\n                    }}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar {...stringAvatar(el.name)} />\n              </ListItemAvatar>\n              <ListItemText\n                primary={el.name}\n                secondary={\n                  <Link\n                    href={`tel:${el.number}`}\n                    sx={{ textDecoration: 'none' }}\n                  >\n                    {el.number}\n                  </Link>\n                }\n              />\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }).isRequired\n  ),\n};\n","import { Box, Button, TextField } from '@mui/material';\nimport { debounce } from 'lodash';\nimport { useCallback, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operation';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const [errorName, setErrorName] = useState('');\n  const [errorPhone, setErrorPhone] = useState('');\n\n  const validateInputName = input => {\n    const nameRegex =\n      /^[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]+(([' -][a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ])?[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]*)*$/;\n    if (!nameRegex.test(input)) {\n      return 'Name may contain only letters, apostrophe, dash and spaces.';\n    }\n    return undefined;\n  };\n\n  const handleInputChangeName = event => {\n    const inputValue = event.target.value;\n    setErrorName(validateInputName(inputValue));\n  };\n  // eslint-disable-next-line\n  const debouncedHandleInputChangeName = useCallback(\n    debounce(e => handleInputChangeName(e), 200),\n    []\n  );\n\n  const validateInputPhone = input => {\n    const phoneRegex =\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n    if (!phoneRegex.test(input)) {\n      return 'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n    }\n    return undefined;\n  };\n\n  const handleInputChangePhone = event => {\n    const inputValue = event.target.value;\n    setErrorPhone(validateInputPhone(inputValue));\n  };\n  // eslint-disable-next-line\n  const debouncedHandleInputChangePhone = useCallback(\n    debounce(e => handleInputChangePhone(e), 200),\n    []\n  );\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value.trim();\n    const number = form.elements.number.value;\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase().replace(/\\s/g, '') ===\n          name.toLowerCase().replace(/\\s/g, '')\n      )\n    ) {\n      toast(`${name} is already in contacts!`, {\n        icon: '⚠️',\n      });\n      return;\n    }\n\n    if (\n      contacts.find(\n        contact =>\n          contact.number.replace(/\\s/g, '') === number.replace(/\\s/g, '')\n      )\n    ) {\n      const index = contacts.findIndex(\n        contact =>\n          contact.number.replace(/\\s/g, '') === number.replace(/\\s/g, '')\n      );\n      toast(`${number} is already in contacts! (${contacts[index].name})`, {\n        icon: '⚠️',\n      });\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleSubmit}\n      display={'flex'}\n      flexDirection={'column'}\n    >\n      <TextField\n        required\n        margin=\"normal\"\n        id=\"name\"\n        label=\"Name\"\n        name=\"name\"\n        type=\"text\"\n        error={!!errorName}\n        helperText={errorName}\n        onChange={debouncedHandleInputChangeName}\n      />\n      <TextField\n        required\n        margin=\"normal\"\n        id=\"phone\"\n        label=\"Phone number\"\n        name=\"number\"\n        type=\"tel\"\n        error={!!errorPhone}\n        helperText={errorPhone}\n        onChange={debouncedHandleInputChangePhone}\n      />\n      <Button\n        variant=\"contained\"\n        type=\"submit\"\n        sx={{ mt: 2 }}\n        disabled={!!errorName || !!errorPhone}\n      >\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n","import { Box, Button, TextField } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateContact } from 'redux/contacts/operation';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const EditForm = ({ id = null }) => {\n  const [errorName, setErrorName] = useState('');\n  const [errorPhone, setErrorPhone] = useState('');\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const validateInputName = input => {\n    const nameRegex =\n      /^[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]+(([' -][a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ])?[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]*)*$/;\n    if (!nameRegex.test(input)) {\n      return 'Name may contain only letters, apostrophe, dash and spaces.';\n    }\n    return undefined;\n  };\n\n  const handleInputChangeName = event => {\n    const inputValue = event.target.value;\n    setName(inputValue);\n    setErrorName(validateInputName(inputValue));\n  };\n\n  const validateInputPhone = input => {\n    const phoneRegex =\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n    if (!phoneRegex.test(input)) {\n      return 'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n    }\n\n    return undefined;\n  };\n\n  const handleInputChangePhone = event => {\n    const inputValue = event.target.value;\n    setPhone(inputValue);\n    setErrorPhone(validateInputPhone(inputValue));\n  };\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value.trim();\n    const number = form.elements.number.value;\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase().replace(/\\s/g, '') ===\n          name.toLowerCase().replace(/\\s/g, '')\n      )\n    ) {\n      const index = contacts.findIndex(\n        contact => contact.name.replace(/\\s/g, '') === name.replace(/\\s/g, '')\n      );\n      if (index !== indexFromId) {\n        toast(`${name} is already in contacts!`, {\n          icon: '⚠️',\n        });\n        return;\n      }\n    }\n\n    if (\n      contacts.find(\n        contact =>\n          contact.number.replace(/\\s/g, '') === number.replace(/\\s/g, '')\n      )\n    ) {\n      const index = contacts.findIndex(\n        contact =>\n          contact.number.replace(/\\s/g, '') === number.replace(/\\s/g, '')\n      );\n      if (index !== indexFromId) {\n        toast(`${number} is already in contacts! (${contacts[index].name})`, {\n          icon: '⚠️',\n        });\n        return;\n      }\n    }\n    dispatch(updateContact({ contactId: id, name, number }));\n    form.reset();\n  };\n\n  const idContact = contacts.find(el => el.id === id);\n  const indexFromId = contacts.findIndex(contact => contact.id === id);\n\n  useEffect(() => {\n    setName(idContact.name);\n    setPhone(idContact.number);\n  }, [idContact]);\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleSubmit}\n      display={'flex'}\n      flexDirection={'column'}\n    >\n      <TextField\n        value={name}\n        required\n        margin=\"normal\"\n        id=\"name\"\n        label=\"Name\"\n        name=\"name\"\n        type=\"text\"\n        error={!!errorName}\n        helperText={errorName}\n        onChange={handleInputChangeName}\n      />\n      <TextField\n        value={phone}\n        required\n        margin=\"normal\"\n        id=\"phone\"\n        label=\"Phone number\"\n        name=\"number\"\n        type=\"tel\"\n        error={!!errorPhone}\n        helperText={errorPhone}\n        onChange={handleInputChangePhone}\n      />\n      <Button\n        variant=\"contained\"\n        type=\"submit\"\n        sx={{ mt: 2 }}\n        disabled={!!errorName || !!errorPhone}\n      >\n        Edit contact\n      </Button>\n    </Box>\n  );\n};\n","import { useEffect } from 'react';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilter,\n  selectModalId,\n  selectModalOpen,\n} from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operation';\nimport { Box, Modal } from '@mui/material';\nimport { closeModal } from 'redux/contacts/modalSlice';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Helmet } from 'react-helmet-async';\nimport { EditForm } from 'components/EditForm/EditForm';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4,\n};\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const modalOpen = useSelector(selectModalOpen);\n  const modalId = useSelector(selectModalId);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleClose = () => {\n    dispatch(closeModal());\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>PhoneBook Contacts</title>\n      </Helmet>\n      <Filter />\n      <ContactList contacts={contacts} filter={filter} />\n      <Modal\n        open={modalOpen}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          {!!modalId ? <EditForm id={modalId} /> : <ContactForm />}\n        </Box>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Filter","dispatch","useDispatch","_jsx","Box","component","onChange","e","filterValue","currentTarget","elements","filter","value","fetchFilter","noValidate","children","TextField","size","margin","id","label","name","InputProps","endAdornment","InputAdornment","position","IconButton","SearchIcon","ContactList","_ref","contacts","stringToColor","string","i","hash","length","charCodeAt","color","concat","toString","slice","filteredContacts","el","toLowerCase","includes","_Fragment","List","map","_jsxs","ListItem","secondaryAction","edge","onClick","openModal","sx","mr","EditIcon","deleteContact","DeleteIcon","ListItemAvatar","Avatar","_objectSpread","bgcolor","toUpperCase","ListItemText","primary","secondary","Link","href","number","textDecoration","Typography","align","mt","ContactForm","_useState","useState","_useState2","_slicedToArray","errorName","setErrorName","_useState3","_useState4","errorPhone","setErrorPhone","debouncedHandleInputChangeName","useCallback","debounce","event","inputValue","target","input","test","validateInputName","handleInputChangeName","debouncedHandleInputChangePhone","validateInputPhone","handleInputChangePhone","useSelector","selectContacts","onSubmit","preventDefault","form","trim","find","contact","replace","toast","icon","index","findIndex","addContact","reset","display","flexDirection","required","type","error","helperText","Button","variant","disabled","EditForm","_ref$id","_useState5","_useState6","setName","_useState7","_useState8","phone","setPhone","idContact","indexFromId","useEffect","updateContact","contactId","style","top","left","transform","width","boxShadow","p","selectFilter","modalOpen","selectModalOpen","modalId","selectModalId","fetchContacts","Helmet","Modal","open","onClose","closeModal"],"sourceRoot":""}